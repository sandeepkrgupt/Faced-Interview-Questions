Concentrix -
1. How can we make n no of divs of same size for any amount of content /
Ans -
<style>
.col-container {
  display: table;
  width: 100%;
}
.col {
  display: table-cell;
  padding: 16px;
}
</style>
<div class="col-container">
  <div class="col" style="background:orange">
    <p>Hello World</p>
  </div>
  <div class="col" style="background:yellow">
    <h2>Column 2</h2>
    <p>Hello World!</p>
    <p>Hello World!</p>
    <p>Hello World!</p>
    <p>Hello World!</p>
  </div>
  <div class="col" style="background:orange">
    <h2>Column 3</h2>
    <p>Some other text..</p>
  </div>
</div>
--------Another Way --------
<style>
.col-container  {
  width:100%;
  height:auto;
  display:flex;
  flex-direction:row;
  justify-content:space-around;
  flex-flow:wrap;
}
.col {
  width:25%;
  height:200px;
  margin:10px;
  box-size:border-box;
}
</style>
-----------------------------------
2. How to render react components differently on diff. OS (let say need to show hide)
Ans -
You can conditionally render some elements in react-native based on whichever platform the app is running on.
render(){
    if(Platform.OS === 'android'){
        return(
           <View><Text>Android</Text></View>
        )
    };

    if(Platform.OS === 'ios'){
        return(
           <View><Text>IOS</Text></View>
        )
    };
}
You can also use JS property - navigator.platform
------------------------------------
3. why :not used in css
Ans -
Set a background color for all elements that are not a <p> element
:not(p) {
  background: #ff0000;
}
will apply background all tags except p tag.
-----------------------------------
React DOM Manupulation?
Ans -
In React, all DOM properties and attributes (including event handlers) should be camelCased. For example, 
the HTML attribute tabindex corresponds to the attribute tabIndex in React. 
The exception is aria-* and data-* attributes, which should be lowercased. For example, you can keep aria-label as aria-label.

============== Wipro ============

1. const ele = <h1>Hello, India</h1>
ReactDOM.render(ele, document.getElementById('root'));
output ?
Ans -
class App extends React.Component {
  render() {
    return (<div>Morning</div>)
  }
}
var ele = <h1>hello, india</h1>
React.render(ele, document.getElementById('app')); // Hello, India
-----------------------------------------
2. what is set method used in javascript ?
Ans - set is used to return values in array and ignore the duplicate values.
const ages = [26, 27, 26, 26, 28, 28, 29, 29, 30]
const uniqueAges = [...new Set(ages)]
console.log(uniqueAges) //Array [26, 27, 28, 29, 30]
---------------------------------------
3. How to clone branch in git and merge your code and push to main branch ?
Ans -

4. Draw a circle and show it in center of your page?
Ans -
show circular div in center
div {
	width: 200px;
	height: 200px;
	position: absolute;
	top:0;
	bottom: 0;
	left: 0;
	right: 0;
	margin: auto;
  background-color:red;
  border-radius:50%;
}
Another Way :-
div {
  align-items: center;
  display: flex;
  justify-content: center;
}
Another Way ;-
div{
  width: 100px;
  height: 100px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
------------------------------------
5. how to return random item from Array?
Ans -
var items = [21, 33, 42];
console.log(items[Math.floor(Math.random()*items.length)]);
------------------------------------
6. var arr = [3,4,5,6]
for (let i=0; i<arr.length; i++) {
  console.log(i) // output ?
}
Ans - [0,1,2,3]

7. write a test case to check if a romponent is rendered/loaded successfully ?
Ans -
import React from 'react';
import ReactDOM from 'react-dom';
import { configure, shallow } from 'enzyme';
import { expect } from 'chai';
import App from './App';
import Adapter from 'enzyme-adapter-react-16'
configure({ adapter: new Adapter() });
describe('App component testing', function() {
  it('renders welcome message', function() {
    const wrapper = shallow(<App />); 
    const welcome = <h1 className='App-title'>Welcome to React</h1>;
    expect(wrapper.contains(welcome)).to.equal(true);
  });
});
------------------------------------------
8. what will output if we call multiple ReactDOM.render(), we call another render inside setTimeout in a render method?
Ans -
class App extends React.Component {
  render() {
    return (<div>Morning</div>)
  }
}
class Demo extends React.Component {
  render() {
    return (<div>Evening</div>)
  }
}
React.render(<App/>, document.getElementById('app'));
React.render(<Demo/>, document.getElementById('app')); // final output is Evening
----------------------
class App extends React.Component {
  render() {
    return (<div>Morning</div>)
    return (<div>Evening</div>)
  }
}
React.render(<App/>, document.getElementById('app')); // Morning
-----------------------------------------------------------
9. what is event.delegate in javascript ?
Ans -
DOM event delegation is a mechanism of responding to ui-events via a single 
common parent rather than each child, through the magic of event "bubbling"
<ul onclick="alert(event.type + '!')">
    <li>One</li>
    <li>Two</li>
    <li>Three</li>
</ul>
event bubbling -
it bubble an event from bottom to top.
event starts are the element that triggered it (saying, changing the #email field in our example above). 
Then, it bubbles up to each of it’s parent elements until it reaches the html element.
------------------------------------------------------------
10. is javacript loosily type or stirct type?
Ans -
Loosely typed" means language does not bother with types too much, and does conversions automatically, 
i.e. you can easily add string to an integer and get the result as a string (or even as integer in some languages like Perl).
JavaScript is both dynamically and loosely typed langua

11. Features of using Javascript?
Ans-
1. Client – Side Technology
2. Greater Control
3. Detecting the User’s Browser and OS.
4. Performing Simple Calculation on the Client side
5. Validating The User’s Input
6. Handling Date and time
7. Generating HTML on the Fly
Every time you click on the button, the browser generates and displays a new HTML code. 
Thanks to JavaScript, this operation performs on the client- machine and therefore 
you don’t have to wait while the information backs and forth between your browser and the web server.
-----------------------------------------------------------------
12. what will be the output if we use multiple return in one render ?
Ans -
class App extends React.Component {
  render() {
    return (<div>Morning</div>)
    return (<div>Noon</div>)
    return (<div>Evening</div>)
  }
}
React.render(<App />, document.getElementById('app')); // Morning
----------------------------------
13. How to authenticate in React ?
Ans -
Handling isAuthenticated only in the state means the user will be unauthenticated every time he refreshes the page. 
That's not really user-friendly!
So instead, the Login page should store an access_token (coming from your backend) in the cookies or localStorage 
of the browser. An access_token proves the user is authenticated and also verifies his identity. 
You will usually pass this access_token to every next requests to your server, to check if this user is allowed 
to access the data he's requesting, or allowed to create, edit and delete the things he's trying to create, edit and delete.

Then you can check this access_token on every other pages as well and redirect the user to the Login page if
he's not authenticated anymore.
setting isAuthenticated() :-
import Cookies from 'js-cookie'
export const getAccessToken = () => Cookies.get('access_token')
export const getRefreshToken = () => Cookies.get('refresh_token')
export const isAuthenticated = () => !!getAccessToken()

-------------
export const authenticate = async () => {
  if (getRefreshToken()) {
    try {
      const tokens = await refreshTokens() // call an API, returns tokens
      const expires = (tokens.expires_in || 60 * 60) * 1000
      const inOneHour = new Date(new Date().getTime() + expires)
      // you will have the exact same setters in your Login page/app too
      Cookies.set('access_token', tokens.access_token, { expires: inOneHour })
      Cookies.set('refresh_token', tokens.refresh_token)
      return true
    } catch (error) {
      redirectToLogin()
      return false
    }
  }
  redirectToLogin()
  return false
}
-----------------------
Authenticate before render component :-
AuthenticateBeforeRender
class AuthenticateBeforeRender extends Component {
  state = {
    isAuthenticated: false,
  }
  componentDidMount() {
    authenticate().then(isAuthenticated => {
      this.setState({ isAuthenticated })
    })
  }
  render() {
    return this.state.isAuthenticated ? this.props.render() : null
  }
}
-----------------------
redirect in react after Authentication
redirectToLogin()
const redirectToLogin = () => {
  window.location.replace(
    `${getConfig().LOGIN_URL}?next=${window.location.href}`
  )
  // or history.push('/login') if your Login page is inside the same app
}
----------------------
React 16.8 converting class comp. to functional comp.
class App extends Component {
  render() {
    return (
      // ...
    );
  }
}
To make it a functional component, change it to look more like this:

const App = () => {
  return (
    // ...
  )
}
------------------------------
