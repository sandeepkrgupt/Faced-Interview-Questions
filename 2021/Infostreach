const obj = {
fname:'ssa',
lname:'abc'
}

const emp = {
fname: 'ssa',
lname: 'abc'
...obj,

} //spread

const emp1 = {
fname:'wwe',
lname:'aa',
...obj
}
console.log(emp1);

obj == emp //true
obj === emp // true

function abc(....obj) { //rest
}


function outer() {
var a =5;
	let inner = function() {
	 console.log(a); //undefid
	}
	inner();
}

outer();

var obj = {
name: 'dda',
getname: function(){
 console.log(this.name); // dda
 let getNameagain = function() {
  console.log(this.name); // undefid.
 }
 getNameagain();
}
}
obj.getname();
---------
undefined == null
------------
var ob = {a:1}
function add() {
 console.lof(add);
}

const abc = add.call(obj, 2);
console.log(abc);

--------------
var ob = {a:1}
function add(arg) {
 console.log(arg);
}

var a1 = add.call(ob, 2);
console.log(a1);
VM493:3 2
VM493:7 undef
------------------
var c == 10
var d == 20
---------------------
c= c+d // 30
d= c-d // 10
c= c-d;//20
--------------------

initialization -----
construxtor call

mounting ----
getDerivedStatefromprops //why here ?
render
componentDidMount
updating ---------
getDerivedStatefromprops 
shouldComponentUpdate
render
getsnapshopbeforeupp
conppDidupdate - what can we do in componentDidUpdate?
unMounting ---------
componentwillunmount
---------------------------
Redux Principle
1. All application state should go in one single javascript object.
2. Redux states are immutable or read only. we cannot write or edit state.
3. if we want to edit or mutate state we need to use functions. which will take prevoius state , action to dispatch and return next state.
-----------------------------
var a =10;
var b =20;
swap two number without using third variable.
---------------------------
why closure? realtime example ? advantages and example?
---------------------------
What is one async method in React ?
--------------------------
log() after setState() , 
it might not print out the latest state since the console log will execute before the state mutation. 
This is due to the asynchronism of setState() which cannot guarantee the mutation of state to act at the moment. 
In this case, React is doing its job and executes console.
-----------------------

--------------------------
var obj1 = {
name: 'san'
}
var emp = {
name: 'san'
}
obj1 == emp // false
obj1 === emp // false
--------------------------
var obj1 = {
name: 'san'
}
var emp = {
id: 1,
...obj1
} // ?

var emp1 = {
name: 'wam',
...obj1
} // san
-----------------------
class App extends React.Component {
	constructor () {
	 this.state = {
	  name: 'Sandeep'
	  age:3
	  
	 }

	 changeName = () => {
	 let newName = this.state;
	 newName.name = 'Sandeep Kumar';
	  this.setState({
	   name: newName.name
	  },())
	 }
	}
	render() {
	 return(<button onClick={this.changeName}></button>)
	};

}

