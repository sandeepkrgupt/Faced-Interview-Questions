const obj = {
fname:'ssa',
lname:'abc'
}

const emp = {
fname: 'ssa',
lname: 'abc'
...obj,

} //spread

const emp1 = {
fname:'wwe',
lname:'aa',
...obj
}
console.log(emp1);

obj == emp //true
obj === emp // true

function abc(....obj) { //rest
}


function outer() {
var a =5;
	let inner = function() {
	 console.log(a); //undefid
	}
	inner();
}

outer();

var obj = {
name: 'dda',
getname: function(){
 console.log(this.name); // dda
 let getNameagain = function() {
  console.log(this.name); // undefid.
 }
 getNameagain();
}
}
obj.getname();
---------
undefined == null
------------
var ob = {a:1}
function add() {
 console.lof(add);
}

const abc = add.call(obj, 2);
console.log(abc);

--------------
var ob = {a:1}
function add(arg) {
 console.log(arg);
}

var a1 = add.call(ob, 2);
console.log(a1);
VM493:3 2
VM493:7 undef
------------------
var c == 10
var d == 20
---------------------
c= c+d // 30
d= c-d // 10
c= c-d;//20
--------------------

initialization -----
construxtor call

mounting ----
getDerivedStatefromprops //why here ?
render
componentDidMount
updating ---------
getDerivedStatefromprops 
shouldComponentUpdate
render
getsnapshopbeforeupp
conppDidupdate - what can we do in componentDidUpdate?
unMounting ---------
componentwillunmount
---------------------

class App extends React.Component {
	constructor () {
	 this.state = {
	  name: 'Sandeep'
	  age:3
	  
	 }

	 changeName = () => {
	  this.setState({
	   this.state.name = 'Sandeep Kumar'
	   age: 
	  },())
	 }
	}
	render()

}
---------------------------
var a =10;
var b =20;
swap two number without using third variable.
---------------------------
why closure? realtime example ? advantages and example?
---------------------------
What is one async method in React ?
--------------------------
var obj1 = {
name: 'san'
}
var emp = {
name: 'san'
}
obj1 == emp // false
obj1 === emp // false
--------------------------
var obj1 = {
name: 'san'
}
var emp = {
id: 1,
...obj1
} // ?

var emp1 = {
name: 'wam',
...obj1
} // san
