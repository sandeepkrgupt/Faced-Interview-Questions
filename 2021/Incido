1. How to call a function declared outside of class inside class?
--------------------------------------------------------
2. What are the optional parameters of setState and when to use them?
Ans :-
The second parameter to setState() is an optional callback 
function that will be executed once setState is completed and the component is re-rendered.
--------------------------------------------------
3. simple React component to increase and decrease value by 1.
Ans : -
import React, { Component } from 'react';
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      clicks: 0,
      show: true
    };
  }

  IncrementItem = () => {
    this.setState({ clicks: this.state.clicks + 1 });
  }
  DecreaseItem = () => {
    this.setState({ clicks: this.state.clicks - 1 });
  }
  ToggleClick = () => {
    this.setState({ show: !this.state.show });
  }

  render() {
    return (
      <div>
        <button onClick={this.IncrementItem}>Click to increment by 1</button>
        <button onClick={this.DecreaseItem}>Click to decrease by 1</button>
        <button onClick={this.ToggleClick}>
          { this.state.show ? 'Hide number' : 'Show number' }
        </button>
        { this.state.show ? <h2>{ this.state.clicks }</h2> : '' }
      </div>
    );
  }
}
export default App;
------------------------------------------------
4. What happens when call setSate inside Render?
-----------------------------------------------
5. how to store Ajax data in redux store?
---------------------------------------------
6. 
var p1 = {
fname: 'San',
getUserName: function(){
	return this.fname;
}
}
var p2 = p1;
p2.fname = 'John';
p2.lname = false;
console.log(p2.fname); // John
(function(){
console.log(p1.fname); // John
console.log(p1.lname); // false
  
console.log(p2.fname); // John
  console.log(p1.lname); // false
}())
-------------------------------------------------
7.
let x = 100;
let y = x;
y = 200;
console.log(x+y); // 300
-------------------------------------------------
8.
var a;
let a = 300;
console.log(a); // Identifier 'a' has already been declared
_________
let a;
var  a=300;
console.log(a); // Identifier 'a' has already been declared
____________
a = 100;
let a;
console.log(a); // ReferenceError: Cannot access 'a' before initialization.
__________
a = 100;
var a;
console.log(a); // 100
-----------------------------------------------
9. Array Unique Items?
Ans :-
1:-
var myArray = ['a', 1, 'a', 2, '1'];

let unique = [...new Set(myArray)];

console.log(unique); // unique is ['a', 1, 2, '1']

10:-
// usage example:
var myArray = ['a', 1, 'a', 2, '1'];
var unique = myArray.filter((value, index, self) => self.indexOf(value) === index);
console.log(unique); // unique is ['a', 1, 2, '1']

11. Find Duplicate items from array?
Ans :-
const yourArray = [1, 4, 2, 3, 4, 5, 5]
let duplicates = []
const tempArray = [...yourArray].sort(); // [1,2,3,4,4,5,5]
for (let i = 0; i < tempArray.length; i++) {
  if (tempArray[i + 1] === tempArray[i]) {
    duplicates.push(tempArray[i])
  }
}

console.log(duplicates) //[ 1, 5 ]
-------------------------------------------
12. Array reverse using for loop?
Ans: -
var arr = [1,2,34,4];
function reverse(items) {
var newArr = [];
for(let i = items.length-1; i>=0;i--) {
newArr.push(items[i])
}
var result = reverse(arr);
console.log(result);
------------------------------------------
13. Passing props from A to C without passing to B.
Ans : -
Using either Context
using Local or Session Storage.
------------------------------------------
14. 
if(true === 1) {console.log('h1');} // it won't go inside if (values are of diff types) 
if(true == 1) {console.log('h1');} // hi ( true is converted to 1)
------------------------------------------
15. React useMemo ?
Ans :-
If you have a component that doesn't have props or state changing,
You don't need to render it again. For preventing the component to re-render we use useMemo.
Syntax-
const any_Name = useMemo(() => {
 return <ChildComp />
}, []);
------------------------------------------
16. what is synthetic event or browser compatbility event?
Ans -
If you have some events that calls asynchronously, then you can call persist() before that event to work as synchronous.
That is known as synthetic events.
-------------------------------------------
17. Why Redux Reducer is a pure function ?
Ans -
Because if they are given the same input, they will always produce the same result output. 
This property helps with situations like unit testing, 
because you know if a test passes once, it will always pass.
-------------------------------------------
18. Redux is Async ? Why Middleware are used?
Ans -
Redux's actions are dispatched synchronously, 
which is a problem for any app that needs to communicate with an external API or perform side effects. 
Redux also allows for middleware to work Asynchronously.
Note :- Middleware helps redux to work asynchronously.
-----------------------------------------------
19. what is a patch method used for?
Ans -
PATCH method is a request method supported by the HTTP protocol for making partial changes to an existing resource.
-----------------------------------------------
20. URI Vs URL?
Ans :-
They are not exactly the same. A URI is an identifier of a specific resource. 
Like a page, or book, or a document. A URL is special type of identifier that also tells you how to access it, such as HTTPs , FTP , etc
