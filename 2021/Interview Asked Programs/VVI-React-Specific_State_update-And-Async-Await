import React from 'react';

class ClickityClick extends React.Component {
    constructor() {
        super();
        // Define the initial state:
        this.state = {
            theme: 'blue',
            addressInfo: {
                street: null,
                number: null,
                city: null,
                country: null
            }
        };
    }

    handleClick = () => {
        this.setState({
            addressInfo: Object.assign({}, this.state.addressInfo, {
                city: 'New York City'
            })
        });
    };
    //---------Or Using Spread Operator -----------
    handleClick = () => {
        this.setState({
            addressInfo: {
                ...this.state.addressInfo,
                city: 'New York City'
            }
        });
    };
    render() {
        return (
            <div>
                <p>I have {this.state.addressInfo.city}</p>
                <button onClick={this.handleClick}>Click me!</button>
            </div>
        );
    }
}

export default ClickityClick;

/*
The spread operator syntax can be used in JavaScript to 'de-compose' objects and arrays. 
When used on an object as we see above, ...this.state.addressInfo returns all the keys 
and values from within that object
*/

/*
handleClick = () => {
  this.setState({
    hasBeenClicked: true
  })
  console.log(this.state.hasBeenClicked); // false
}
State changes, however instant they might appear, happen asynchronously. 
If we want to access our new state after it has been updated, we can optionally 
add a callback as a second argument to the this.setState() function.
*/


=========================///==========================================
async function showAvatar() {
  // read our JSON
  let response = await fetch('/article/promise-chaining/user.json');
  let user = await response.json();
  // read github user
  let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);
  let githubUser = await githubResponse.json();

  return githubUser;
}

showAvatar();
