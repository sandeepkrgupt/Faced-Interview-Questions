class MyComponent extends React.Component {
  constructor(props) {
    // set the default internal state
	super(props);
    this.state = {
      clicks: 0
    };
  }

  componentDidMount() {
    this.refs.myComponentDiv.addEventListener('click', this.clickHandler);
  }

  componentWillUnmount() {
    this.refs.myComponentDiv.removeEventListener('click', this.clickHandler);
  }

  clickHandler() {
    this.setState({
      clicks: this.clicks + 1
    });
  }
  render() {
    let children = this.props.children;

    return (
      <div className="my-component" ref="myComponentDiv">
      <h2>My Component (`${this.state.clicks} clicks`})</h2>
      <h3>{this.props.headerText}</h3>
    {children}
    </div>
    );
  }
}
jquey methods
--------------------------------------------------
for (var i = 0; i < 5; i++) {
		setTimeout(function() { console.log(i); }, i * 1000 ); // 5
	}
-----------------------------------------	
var a={},
b={key:'b'},
c={key:'c'};

a[b]=123;
a[c]=456;
console.log(a[b]); //456
-------------------------------------------
console.log(1+"2"+"3"); //123
console.log(1++"2"+"3"); //123
console.log(1++); //Invalid left-hand side expression in postfix operation
console.log(1++2); // Invalid left-hand side expression in postfix operation
-------------------------------------------
import React, { useState } from "react";
import "./styles.css";

export default function App() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
  };
  const handleReset = () => {
    setCount(0);
  };

  return (
    <div className="App">
      <h1>You've clicked the button {count} times.</h1>
      <button onClick={handleClick}>Click me!</button>
      <button onClick={handleReset}>Reset</button>
    </div>
  );
}
---------------------------------------------
React Counter with Redux
https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter?file=/src/index.js 
---------------------------------------------
Counter Using Class Component-

import React from 'react'
import { render } from 'react-dom'

const CounterBtn = props => {
  return (<button className="btn"  onClick={props.onClick}>{props.children}</button>);
}
class App extends React.Component {
   constructor( props ) {
     super( props );
      this.state = {
        counter: 0,
      };
   }

   incrementCounter = () => {
     this.setState({ 
       counter: this.state.counter + 1 
      })
   }
   decrementCounter = () => {
     this.setState({
       counter:  this.state.counter - 1
      })
   }
   resetCounter = () => {
     this.setState({ counter: 0 })
   }
   render(){
     return <div className="main-content">
        <CounterBtn onClick={this.incrementCounter}>+</CounterBtn>
        <span className="counter-text">{this.state.counter}</span>
        <CounterBtn onClick={this.decrementCounter}>-</CounterBtn>
        <CounterBtn onClick={this.resetCounter}>Reset</CounterBtn>
        </div>
   }
}

render(<App />, document.getElementById('root'))
-----------------------------------------
const obj = {};
const n = null
console.log(obj == n) // false
console.log(obj === n) // false
-----------------------------------------
Slice Vs Splice
 The splice() method returns the removed item(s) in an array and slice() method returns the selected element(s) in an array, as a new array object. 
 2. The splice() method changes the original array and slice() method doesn't change the original array.
 -------------------------------------------
 toString()
 Return the value of String Object.
 ---------------------------------------
 Window Events :-
onclick
onerror: 
onfocus:
onload:
onmouseenter:
onmousemove: 
onmouseout: 
onmouseover: 
onpause: 
onplay:
onprogress:
onreset: 
onresize: 
onscroll:
onsearch: 
onselect: 
onsubmit:
----------------
HTML Events
onfocus
onblur
onchange
onclick
ondblclick
onselect
ontoggle
-----------------------
Network or HTTP response error codes
Informational responses (100–199)
Successful responses (200–299)
Redirects (300–399)
Client errors (400–499)
Server errors (500–599)

--------------------------------------------
