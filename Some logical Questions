var a = {a: 1};
var b = {a: 1};
a == b //false
a === b //false

var c = a;
a == c//true
a === c //true
-------------------------
comparing two arrays and objects
var object = { 'a': 1 };
var other = { 'a': 1 };
 
_.isEqual(object, other);
// => true
using pure js:-
let arr1 = [1,2,3]
let arr2 = [1,2,3]

function comapre(arr1, arr2) {
	const arrfinal = [];
	arr1.forEach((arg1) => arr2.forEach((arg2)=> {
		if(arg1 === arg2) {
		 arrfinal.push(arg1);
		}
	})
)
	return arrfinal;
}
------------------------------
bind() gives you a new function back which you need to execute to get the result but call and apply do not.
let obj1 = {num:2};

const addToThis = function(a,b,c) {
	return this.num +a+b+c;
}
let bound = addToThis.bind(obj1);
console.log(bound); 
// output
ƒ (a,b,c) {
	return this.num +a+b+c;
}
if - console.log(bound(1,2,3)); //output 8 
--------------------------------------
https://www.thatjsdude.com/interview/js1.html


---() - - 

var obj = {
  id: 42,
  counter: function counter() {
    setTimeout(() => {
      console.log(this.id);
    }, 1000);
  }
};
ES6 arrow functions can’t be bound to a this keyword, so it will lexically go up a scope, 
and use the value of this in the scope in which it was defined.

When you should use them
Arrow functions shine best with anything that requires this to be bound to the context, and not the function itself.
