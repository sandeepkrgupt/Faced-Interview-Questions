====================
Extentia :- 
=====================
1 What is cross domain Error ?
Ans - Cross domain or origin is a machenism that allow restricted web resource or domain to be requested from another domain.
Cross domain error occurs when -
i. Js try to access info. which it should not Like -
  you try to read cookie of another domain.
  if you try to do XMLHTTP hijeck, steal visitor session etc.
It is a securiety feature which is now standered in all browsers.

-----------------------------------------
2. what are HTTP Headers used for ?
Ans - They provide required info. about request and response.
----------------------------------------
3. How can we pass values from one independent comp. to another in React ?
Ans - Using props or redux state we can do so.
Example -
class A extends React.Component {
  constructor() {
    super();
    this.onClickshow = this.onClickShow.bind(this);
  }
  onclickShow() {
    console.log("this ia A comp.");
  }
  
  render() {
    return (
        <B myclickFun = {this.onClickShow} />
    )
  }
}
class B extend React.Component {
  constructor(props){}
  render() {
    return (
      <div>
        <button onClick={this.props.myClickFun}>ok</button>
      </div>
    )
  }
}
----------------------------------------------
4. whta is bind method? and what will happen if we won't bind our func. to event ?
Ans - bind creates new func. that will have 'this' set to first parameter passed to bind.
var sum = function(a,b) {
  return a+b;
}
var add = sum.bind(null, 5);
console.log(add(10));
output - 15
when we won't bind our function to event it will show - this is undefined due to your event loss it's context or this.
---------------------------------------------
5. what is Object.Keys ?
Ans - it returns an array of given objects own property keys or name not value.
var obj1 = {
  name: "john",
  age:28
}
console.log(Object.keys(obj1));
output - ["name", "age"]
---------------------------------------------
6. Can we do inheritance in es5 ?
Ans - Yes we can do inheritance using prototype. Each object ia attached with prototype.
function Bird(type, color) {
  this.type = type;
  this.color = color;
}
Bird('Indian Bird', 'Red');
Bird.prototype.name = 'Parrot';
---------------------------------------------
7. Bootstrap Grid vs Flex ?
Ans - Grid layout is a two dimensional sys., means row and column. Gird is used for layout first approach
flex is one directional. it is used for content first approach.
-------------------------------------------
8. diff. b/w normal func. and arrow func. ?
Ans - Arguments and objects are not available in arrow function also arrow fun do not have it's own this.
 They have some nice properties which allow them to work well as callback functions.
 
 Normal function
let obj = {
  myVar: 'foo',
  
  myFunc: function() { 
    console.log(this.myVar)   
 
    setTimeout(function() {
      console.log(this.myVar)
    }, 1000)
  }
}
obj.myFunc() // foo ... then... undefined


Arrow function

let obj = {
  myVar: 'foo',
  
  myFunc: function() { 
    console.log(this.myVar)  
  
    setTimeout(() => {
      console.log(this.myVar)
    }, 1000)
  }
}
obj.myFunc() // foo ... then... foo
 --------------------------------------
 9.what is Object.assign used for ?
 Ans - it is used to copy values from one or more source object to target object.
 const target = {a:1,b:2};
 const source = {b:3,c:4};
 Object.assign(target,source);
 output - {a:1,b:3,c:4}
 -----------------------------------
 10. can we create variable in css or css3 ?
 Ans - yes we can using var() method.
 :root { --homepage-bg : #777};
 #homePage {background-color: var(--homepage-bg)}
 rules -
 always start with :root or body selector.
 must begin with -- and it is case sensitive
—-----------------------
the major difference is that display: inline-block allows to set a width and height on the element. 
Also, with display: inline-block , the top and bottom margins/paddings
------------------------
Simple Closure Example -
function make_counter() {
  var counter = 0;
  return function() {
    return ++counter;
  };
}
 -------------------------------------------------------------------------------------------------------------------
 ==========================
 Intelliswift
 ==========================
 1.write a program to square array elements.
 Ans -
let arr = [1, 6, 7, 9];
let result = arr.map(x => x ** 2); // ** is es6 exponential 
console.log(result);
output - [1,36,49,81]
 2. Does map() function need a return statement ?
No it's not necessary.
fish = [ "piranha","cod", "eel" ];
// Print out each item in the array
let printFish = fish.map(individualFish => {
    console.log(individualFish);
});
----------------------------------
3. what is HOC in js? give an example.
Ans-
A higher-order component (HOC) is an advanced technique in React for reusing component logic.
A higher order component accepts a component as an argument and returns a new component — 
React Redux’s connect function is an example of this and returns an HOC.
Example -
import { addTodo } from './actionCreators'

const mapDispatchToProps = {
  addTodo
}

export default connect(
  null,
  mapDispatchToProps
)(TodoApp) // TodoApp is our component.
Syntax -
const EnhancedComponent = higherOrderComponent(WrappedComponent);
-----------------------------------------
4. what is pure function? give an example.
Ans -
A function is only pure, if given the same input, it will always produce the same output.
const sum = (a, b) => a+b ;
highpass(5, 5); // => 10
highpass(2, 2); // => 4
Math.Random() is also a pure function which always return random value between 0 and 1.
why should we use them -
One of the major benefits of using pure functions is they are immediately testable. 
They will always produce the same result if you pass in the same arguments. 
They also makes maintaining and refactoring code much easier.
-------------------------------------
5. how to iterate array items? write all methods?
1. for 2. map 3. spread operator 4. forEach 5.for of
1. for -
let numbers = [2, 4, 6, 8];
for(let i = 0; i < numbers.length; i++){
   console.log(numbers[i]*2);
}
2. map -
let numbers = [4, 6, 8];
let multiply = numbers.map(individualNumber => {
    console.log(individualNumber*2);
});
if you use return statement it will only return last element i.e "eel". so do below-
let numbers = [4, 6, 8];
arr = [];
let multiply = numbers.map(individualNumber => {
  arr = arr + " " +individualNumber*2
    return arr;
});
console.log(arr); // "8 12 16"

3. forEach -
let numbers = [4,8,12];
numbers.forEach(function(args) {
  console.log(args*2);
});
4. ... operator
let numbers = [4,8,12];
console.log(...numbers*2) //Error: Found non-callable @@iterator
5. for of -
let numbers = [4,8,12];
for (let x of numbers) {
  console.log(x*4);
} // [16,32,48]
----------------------------------
 6. Difference b/w map() each and forEach() ?
 Ans -
.map() is designed to both iterate and create a new resulting array.
.each() and forEach() is designed to be an iterator (no new array created).
 
7. what is functional programming ? is js a functional programming language ?
Ans -
I would say no. Although it does support closures and functions as first class values, the fact that it does not 
support tail call optimization or provide any actual performance optimization for recursion.

functional programming languages don’t support flow Controls like loop statements and conditional 
statements like If-Else and Switch Statements. 
They directly use the functions and functional calls.
but functional programming languages support popular concepts such as 
Abstraction, Encapsulation, Inheritance, and Polymorphism.
Features - bug free code, efficiency, support nested functions.
Javascript is object oriented language.

8. Higher order functions (HOC) with example ?
Ans-
A higher-order function is a function that operates on other functions. 
That is, it takes functions as inputs and/or returns them as outputs.
Some fantastic ones are built into the language, such as Array.map, Array.filter, and Array.reduce.

myButton.click(function thisIsACallback() {
  console.log('Someone clicked me!');
});
Here, click is the higher-order function and thisIsACallback is the callback. 
click doesn't call it until the user clicks the button.

Note -
functions which may not necessarily have a name. Those are called anonymous functions. 
like -
function makeMoreThanSum(f) {//This is a higher-order function
   return function(n1, n2) {
       sum(f(n1), n2)
   }
}
var sumSquareOfFirst = makeMoreThanSum(function(n){
    return n*n;
});
sumSquareOfFirst(2,1);//5

5. how to iterate Objects? write all methods.
1. iterating objects keys only :-
creates an array that contains the properties of an object
const fruits = [{
  apple: 28,
  orange: 17,
  pear: 54,
}]

const obj1 = Object.keys(fruits[0])
console.log(obj1) // ["apple","orange","pear"]

ii. Object.values -
creates an array that contains the values of an object
const fruits = {
  apple: 28,
  orange: 17,
  pear: 54,
}

const obj1 = Object.values(fruits)
console.log(obj1) // ["28","17","54"]

iii. for in -
const fruits = {
  apple:28,
  orange:17,
  pear:54
}
for (let x in fruits) {
  console.log(x); // output - 28, 17, 54
}

iv. Object.entries -
creates an array of arrays. Each inner array has two item. The first item is the property; the second item is the value.
const fruits = {
  apple:28,
  orange:17,
  pear:54
}
const obj1 = Object.entries(fruits);
console.log(obj1) // Array [Array ["apple", 28], Array ["orange", 17], Array ["pear", 54]]

V. Object.defineProperty - 

Changing a Property Valuebject.defineProperty() -
The static method Object.defineProperty() defines a new property 
directly on an object or empty object,

var person = {
  firstName: "John",
  lastName : "Doe",
  language : "EN"
};

// Change a property
Object.defineProperty(person, "language", {value : "NO"});
Vi. 
The Object.freeze() method freezes an object. A frozen object can no longer be changed; 
freezing an object prevents new properties from being added to it, existing properties from being removed, onst fruits = {};

const obj = {
  prop: 42
};

Object.freeze(obj);

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// expected output: 42
Vii Object.seal - 
The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. 
Values of present properties can still be changed as long as they are writable.

const object1 = {
  property1: 42
};

Object.seal(object1);
object1.property1 = 33;
console.log(object1.property1);
// expected output: 33

-------------------------------------------------
-----------Incedo and Capita --------------------

Q1 Ans - we can get array items instead of setTimeout is zero.
var arr = [1,2,3,4,5,0]; 
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log(arr[i]);
  },0)
};
// output 1,2,3,4,5,0
second example -
var arr = ['kevin', 'mike', 'sally',];
arr.forEach(function(person){
  setTimeout(function(){
    console.log(person);
  },0);    
}); 
when setTimeout is zero it will immediately print the output.

----------------------------
Q2 Ans - Finding the sum of n odd numbers -
// Method to check if a number is odd
function odd(n){
  return (n%2) // returing boolean value (0,1)
}
//Method to find sum of odd numbers till n
function findSum(a) {
  let sum = 0;
  for(let i = 0; i <= a; i++){
    if(odd(i)) {
      sum = sum + i;
    }
  }
  return sum
}
var x = findSum(10);
console.log('sum is -' , x)// 25
//or
console.log(`sum is ${findSum(10)}`)  //25
------------------------------------
Q3 Ans - string to array conversion 
function myFunction() {
  var str = "How are you doing today?";
  var res = str.split(" ");
  console.log(res); // ["How", "are", "you", "doing", "today?"]
}
var arr = ["How", "are", "you", "doing", "today?"]
console.log(typeof(arr)); // object
-----------------------
Q4 ans - array to string conversion 
function myFunction() {
  var fruits = ["Banana", "Orange", "Apple", "Mango"];
  var x = fruits.toString();
  console.log(x); // "Banana", "Orange", "Apple", "Mango"
} 
-----------------------------------
Q5. converting object to array
var obj = {"name":"john","age":27,"salary":60000}
var result = Object.keys(obj).map(items => {
  return [items, obj[items]]; // items return keys and obj[items] return values.
});
console.log(result); // [Array ["name", "john"], Array ["age", 27], Array ["salary", 60000]]
or 
var obj = {"name":"john","age":27,"salary":60000}
Object.keys(obj).map(items => {
  console.log( [items, obj[items]]);
});
----------------
Q6. converting array to object -
var arr = [1,'2','san',null];
var x = Object.assign({}, arr);
console.log(x); // Object { 0: 1, 1: "2", 2: "san", 3: null }
-----------------------
Q7. check an array for null or undefined values -

----------------------
Q8. checking for empty array -
var array = [null,undefined]; | if array = [] // empty
if (array && array.length) {   
   console.log('not empty');
} else {
   console.log('empty');
} // not empty 
-----------------------
Q9. checking duplicate value in array -
1st way
let array1 = [5,6,7,8,13,8,6];
function dublicateFunction(arg) { 
	return arg.filter( (item,i) => arg.indexOf(arg[i]) !== i); 
}
console.log(dublicateFunction(array1));// [8,6]

2nd way -
function test(arr){
	//var result = [];
	for (var i = 0; i < arr.length-1; i++){
		for (var j = i+1; j < arr.length; j++){
			if (arr[i] == arr[j]){
				console.log(arr[i]); // -2,4
				//result.push(arr[i]);
			}
		}
	}
	//return result;
}
test([1, 2, -2, 4, 5, 4, 7, 8, -2, 6]);
// if you use return then
console.log(test([1, 2, -2, 4, 5, 4, 7, 8, -2, 6])); // [-2,4]
----------------------------------
Q9. output of below with var and let will be same
let arr = [1,2,5,4,15];
for (let i=0; i<arr.length; i++) {
	console.log(arr[i]); // 1,2,5,4,15
} 
-----------------------
Q10. difference between let and var -
function varTest() {
  var x = 1;
  if (true) {
    var x = 2;  // same variable!
    console.log(x);  // 2
  }
  console.log(x);  // 2
}
varTest();
============
function letTest() {
  let x = 1;
  if (true) {
    let x = 2;  // different variable
    console.log(x);  // 2
  }
  console.log(x);  // 1
}
letTest();
----------------------
what will be the output of below -
function sum(a,b) {
	console.log(a+b);
}

sum(2+4+"4"+1+2,5+8+null+"1+3"); //  "6412131+3"
----
console.log(6+4 + "4" + 9+9+2+'ert'+5); // "104992ert5"
----
console.log(6+4 + "4" + 9+9+2+'ert'+5 -3); // "NAN"
----
console.log(6+4 + "4" + 9+9+2+"2"+5); //"10499225"
---------------------------------
Q11. closures 
displayName doesn’t define any local variables, 
yet it is able to alert name because name has been defined in the scope in which the closure was created — that of its outer function.
Note - Closures are useful because they let you associate some data with a function that operates on that data.
function myName() {
    var name = "Piter Pan"; // outer func. variable
    function displayName() {
        alert (name); // no inner func var but it can access name;
    }
    function setName(newName) {
        name = newName;
    }
    displayName();
    setName("Piter England");
    displayName();
}
myName();
===== 
calling inner func through outer fun variable
function makeFunc() {
  var name = 'Mozilla';
  function displayName() {
    alert(name);
  }
  return displayName;
}

var myFunc = makeFunc(); // outer func. variable.
myFunc();
-------------------
Q12. var str = "india" // print all vowels in a string?

--------------
Q13 datatype in js
There are 7 types of datatypes. 
Number, string, boolean, array, objects, null, undefined. 

