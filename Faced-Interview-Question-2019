====================
Extentia :- 
=====================
1 What is cross domain Error ?
Ans - Cross domain or origin is a machenism that allow restricted web resource or domain to be requested from another domain.
Cross domain error occurs when -
i. Js try to access info. which it should not Like -
  you try to read cookie of another domain.
  if you try to do XMLHTTP hijeck, steal visitor session etc.
It is a securiety feature which is now standered in all browsers.

-----------------------------------------
2. what are HTTP Headers used for ?
Ans - They provide required info. about request and response.
----------------------------------------
3. How can we pass values from one independent comp. to another in React ?
Ans - Using props or redux state we can do so.
Example -
class A extends React.Component {
  constructor() {
    super();
    this.onClickshow = this.onClickShow.bind(this);
  }
  onclickShow() {
    console.log("this ia A comp.");
  }
  
  render() {
    return (
        <B myclickFun = {this.onClickShow} />
    )
  }
}
class B extend React.Component {
  constructor(props){}
  render() {
    return (
      <div>
        <button onClick={this.props.myClickFun}>ok</button>
      </div>
    )
  }
}
----------------------------------------------
4. whta is bind method? and what will happen if we won't bind our func. to event ?
Ans - bind creates new func. that will have 'this' set to first parameter passed to bind.
var sum = function(a,b) {
  return a+b;
}
var add = sum.bind(null, 5);
console.log(add(10));
output - 15
when we won't bind our function to event it will show - this is undefined due to your event loss it's context or this.
---------------------------------------------
5. what is Object.Keys ?
Ans - it returns an array of given objects own property keys or name not value.
var obj1 = {
  name: "john",
  age:28
}
console.log(Object.keys(obj1));
output - ["name", "age"]
---------------------------------------------
6. Can we do inheritance in es5 ?
Ans - Yes we can do inheritance using prototype. Each object ia attached with prototype.
function Bird(type, color) {
  this.type = type;
  this.color = color;
}
Bird('Indian Bird', 'Red');
Bird.prototype.name = 'Parrot';
---------------------------------------------
7. Bootstrap Grid vs Flex ?
Ans - Grid layout is a two dimensional sys., means row and column. Gird is used for layout first approach
flex is one directional. it is used for content first approach.
-------------------------------------------
8. diff. b/w normal func. and arrow func. ?
Ans - Arguments and objects are not available in arrow function also arrow fun do not have it's own this.
 They have some nice properties which allow them to work well as callback functions
 --------------------------------------
 9.what is Object.assign used for ?
 Ans - it is used to copy values from one or more source object to target object.
 const target = {a:1,b:2};
 const source = {b:3,c:4};
 Object.assign(target,source);
 output - {a:1,b:3,c:4}
 -----------------------------------
 10. can we create variable in css or css3 ?
 Ans - yes we can using var() method.
 :root { --homepage-bg : #777};
 #homePage {background-color: var(--homepage-bg)}
 rules -
 always start with :root or body selector.
 must begin with -- and it is case sensitive
—-----------------------
the major difference is that display: inline-block allows to set a width and height on the element. 
Also, with display: inline-block , the top and bottom margins/paddings
------------------------
Simple Closure Example -
function make_counter() {
  var counter = 0;
  return function() {
    return ++counter;
  };
}
 -------------------------------------------------------------------------------------------------------------------
 ==========================
 Intelliswift
 ==========================
 1.write a program to square array elements.
 Ans -
let arr = [1, 6, 7, 9];
let result = arr.map(x => x ** 2); // ** is es6 exponential 
console.log(result);
output - [1,36,49,81]
 2. Does map() function need a return statement ?
No it's not necessary.
fish = [ "piranha","cod", "eel" ];
// Print out each item in the array
let printFish = fish.map(individualFish => {
    console.log(individualFish);
});
printFish;
----------------------------------
3. what is HOC in js? give an example.
Ans-
A higher-order component (HOC) is an advanced technique in React for reusing component logic.
A higher order component accepts a component as an argument and returns a new component — 
React Redux’s connect function is an example of this and returns an HOC.
Example -
import { addTodo } from './actionCreators'

const mapDispatchToProps = {
  addTodo
}

export default connect(
  null,
  mapDispatchToProps
)(TodoApp) // TodoApp is our component.
Syntax -
const EnhancedComponent = higherOrderComponent(WrappedComponent);
-----------------------------------------
4. what is pure function? give an example.
Ans -
A function is only pure, if given the same input, it will always produce the same output.
const sum = (a, b) => a+b ;
highpass(5, 5); // => 10
highpass(2, 2); // => 4
Math.Random() is also a pure function which always return random value between 0 and 1.
why should we use them -
One of the major benefits of using pure functions is they are immediately testable. 
They will always produce the same result if you pass in the same arguments. 
They also makes maintaining and refactoring code much easier.
-------------------------------------
5. how to iterate array items? write all methods?
1. for 2. map 3. spread operator 4. forEach 5.for of
1. for -
let myArray = ["piranha", "tigerFish", "cod", "eel"];
for(let i = 0; i < myArray.length; i++){
   console.log(myArray[i]);
}
2. map -
let fish = [ "piranha", "tigerFish", "cod", "eel" ];
let printFish = fish.map(individualFish => {
    console.log(individualFish);
});
printFish;
3. forEach -
let fish = [ "piranha", "tigerFish", "cod", "eel" ];
fish.forEach(function(element) {
  console.log(element);
});
4. ... operator
let numbers = [9, 4, 7, 1];
Math.min(...numbers);
5. for of -
let fish = ["piranha", "tigerFish","cod","eel"];
for (let x of fish) {
  console.log(x);
}
----------------------------------
 6. Difference b/w map() each and forEach() ?
 Ans -
.map() is designed to both iterate and create a new resulting array.
.each() and forEach() is designed to be an iterator (no new array created).
 
7. what is functional programming ? is js a functional programming language ?
Ans -
I would say no. Although it does support closures and functions as first class values, the fact that it does not 
support tail call optimization or provide any actual performance optimization for recursion.

functional programming languages don’t support flow Controls like loop statements and conditional 
statements like If-Else and Switch Statements. 
They directly use the functions and functional calls.
but functional programming languages support popular concepts such as 
Abstraction, Encapsulation, Inheritance, and Polymorphism.
Features - bug free code, efficiency, support nested functions.
Javascript is object oriented language.

8. Higher order functions (HOC) with example ?
Ans-
A higher-order function is a function that operates on other functions. 
That is, it takes functions as inputs and/or returns them as outputs.
Some fantastic ones are built into the language, such as Array.map, Array.filter, and Array.reduce.

myButton.click(function thisIsACallback() {
  console.log('Someone clicked me!');
});
Here, click is the higher-order function and thisIsACallback is the callback. 
click doesn't call it until the user clicks the button.

Note -
functions which may not necessarily have a name. Those are called anonymous functions. 
like -
function makeMoreThanSum(f) {//This is a higher-order function
   return function(n1, n2) {
       sum(f(n1), n2)
   }
}
var sumSquareOfFirst = makeMoreThanSum(function(n){
    return n*n;
});
sumSquareOfFirst(2,1);//5

5. how to iterate Objects? write all methods.
1. iterating objects keys only :-
creates an array that contains the properties of an object
const fruits = [{
  apple: 28,
  orange: 17,
  pear: 54,
}]

const obj1 = Object.keys(fruits[0])
console.log(obj1) // ["apple","orange","pear"]

ii. Object.values -
creates an array that contains the values of an object
const fruits = {
  apple: 28,
  orange: 17,
  pear: 54,
}

const obj1 = Object.values(fruits)
console.log(obj1) // ["28","17","54"]

iii. for in -
const fruits = {
  apple:28,
  orange:17,
  pear:54
}
for (let x in fruits) {
  console.log(x); // output - 28, 17, 54
}

iv. Object.entries -
creates an array of arrays. Each inner array has two item. The first item is the property; the second item is the value.
const fruits = {
  apple:28,
  orange:17,
  pear:54
}
const obj1 = Object.entries(fruits);
console.log(obj1) // Array [Array ["apple", 28], Array ["orange", 17], Array ["pear", 54]]
